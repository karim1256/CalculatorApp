import 'package:flutter/material.dart';
import 'package:math_expressions/math_expressions.dart';

void main() {
  runApp(CalculatorApp());
}

class CalculatorApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Calculator',
      home: CalculatorPage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class CalculatorPage extends StatefulWidget {
  @override
  _CalculatorPageState createState() => _CalculatorPageState();
}

class _CalculatorPageState extends State<CalculatorPage> {
  String output = '';
  bool dark = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: dark == false ? Colors.white : Colors.black,
      appBar: AppBar(
              backgroundColor: dark == false ? Colors.grey :Color.fromARGB(255, 24, 48, 68),
        title: Text('Calculator',
        style:TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 24,
        color: color(),

        )),
        actions: [
          TextButton(
            child: Text(
              dark == false ? 'Dark Mode' : 'Light Mode',
              style: TextStyle(
                color: color(),
                fontSize: 20
              ),
            ),
            onPressed: () {
              setState(() {
                dark = !dark;
              });
            },
          ),
        ],
      ),

                   body: 
                     Column(
                              
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Padding(
                          padding: const EdgeInsets.all(20.0),
                          child: Text(
                            output,
                            style: TextStyle(fontSize: 24, color: dark ? Colors.white : Colors.black),
                          ),
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            _buildButton('7'),
                            _buildButton('8'),
                            _buildButton('9'),
                            _buildButton('/'),
                          ],
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            _buildButton('4'),
                            _buildButton('5'),
                            _buildButton('6'),
                            _buildButton('x'),
                          ],
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            _buildButton('1'),
                            _buildButton('2'),
                            _buildButton('3'),
                            _buildButton('-'),
                          ],
                        ),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            _buildButton('C'),
                            _buildButton('0'),
                            _buildButton('='),
                            _buildButton('+'),
                          ],
                        ),
                      ],
                                     ),
                
    );
  }
  Color color(){
    if(dark == false){
      return Colors.white;
    }
    else{
      return Colors.black;
    }
  }

  Widget _buildButton(String num) {
    return GestureDetector(
      onTap: () {
        _handleButtonPress(num);
      },
      child: Container(
        alignment: Alignment.center,
        width: 70,
        height: 90,
        margin: EdgeInsets.all(10),
        padding: EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: dark == false ? Colors.grey : const Color.fromARGB(255, 24, 48, 68),
          borderRadius: BorderRadius.circular(10),
        ),
        child: Text(
          num,
          style: TextStyle(fontSize: 24,
          fontWeight: FontWeight.bold,
           color: color()),
        ),
      ),
    );
  }

  void _handleButtonPress(String buttonText) {
    setState(() {
      if (buttonText == 'C') {
        output = '';
      } else if (buttonText == '=') {
        _calculate();
      } else {
        output += buttonText;
      }
    });
  }

  void _calculate() {
    Parser p = Parser();
    Expression exp = p.parse(output);
    ContextModel cm = ContextModel();
    double result = exp.evaluate(EvaluationType.REAL, cm);
    setState(() {
      output = result.toString();
    });
  }
}

